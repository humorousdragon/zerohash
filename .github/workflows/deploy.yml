name: Build

on:
  push:
    branches:
      - "master"
  
  workflow_dispatch:
  
jobs:

## Job to perform unit testing on code  
  unit_test:
    name: Testing the code using pytest
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Setup Python
        uses: actions/setup-python@v2
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Test with pytest
        run: |
          pytest

      - name: Report Job Status
        if: always()
        uses: ravsamhq/notify-slack-action@master
        with:
          status: ${{ job.status }}
          notify_when: 'success,failure,warnings'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

## Job to build docker image and push to ECR
  build:
    name: Build Image and push to ECR
    runs-on: ubuntu-latest
    needs: unit_test

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ZH_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.ZH_AWS_SECRET_KEY }}
          aws-region: us-east-2
      
      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag and push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: btc-spot-price
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Report Job Status
        if: always()
        uses: ravsamhq/notify-slack-action@master
        with:
          status: ${{ job.status }}
          notify_when: 'success,failure,warnings'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

## Job to deploy application on EKS cluster using Helm charts
  deploy_helm:
    name: Deploy via helm charts
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy
        env:
          # ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REGISTRY: 590532860066.dkr.ecr.us-east-2.amazonaws.com
          ECR_REPOSITORY: btc-spot-price
          IMAGE_TAG: ${{ github.sha }}
          # IMAGE_TAG: 1.0.0
          AWS_ACCESS_KEY_ID: ${{ secrets.ZH_AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.ZH_AWS_SECRET_KEY }}
          KUBECONFIG: ${{ secrets.KUBECONFIG }}
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          echo $KUBECONFIG | base64 -di > $(pwd)/config
          docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -v $(pwd)/config:/root/.kube/config -v $(pwd)/:/apps concirrussre/helm:3.5.0 upgrade --install btc-spot-price ./helm --set image.tag=$IMAGE_TAG --set image.repository=$ECR_REGISTRY/$ECR_REPOSITORY --namespace=default

      - name: Report Job Status
        if: always()
        uses: ravsamhq/notify-slack-action@master
        with:
          status: ${{ job.status }}
          notify_when: 'success,failure,warnings'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

## Job to perform api testing on application running on EKS cluster
  api_test:
    name: API Testing
    runs-on: ubuntu-latest
    needs: deploy_helm

    steps:
      - name: Sleep for 2 minutes
        run: sleep 120s

      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Install Node
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      
      - name: Install newman
        run: |
          npm install -g newman
        
      - name: Run postman collection
        run: |
          newman run zh_api_test.json -r cli

      - name: Report Job Status
        if: always()
        uses: ravsamhq/notify-slack-action@master
        with:
          status: ${{ job.status }}
          notify_when: 'success,failure,warnings'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

## Job to deploy application on EKS using terraform
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: develop
    needs: api_test

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    - name: Move to directory
      run: |
        cd ./tf-deploy

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        cd ./tf-deploy
        terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: |
        cd ./tf-deploy
        terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: |
        cd ./tf-deploy
        terraform plan

      # On push to master, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: |
        cd ./tf-deploy
        terraform apply -auto-approve